using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO; 

public class WordBank : MonoBehaviour
{
    //WebGL player can't read from file, therefore I put the entire wordlist here.
    public List<string> WordListEasy;  
    
    private string[] list = {"ヒント", "サラダ","マスク","ポスト","ミルク","ノート","シェード","シンプル","シングル","ナイフ","ゲーム","グレープ","シーソー",
        "クイーン","カー","バー","ガーデン","レバー","タンカー","ラバー","サー","スカート","ガール","ターン","ターバン","カーテン","ポート","フォーム","レコード",
        "セーラー","ドクター","エラー","スピード","チーズ","ジープ","スピーチ","シール","パール","レール","チェーン","テール","ロード","ボート","コート","グループ",
        "クーポン","ソース","オークション","オーディション","オーバーホール","スプーン","ルーム","プール","コール","ボール","オール","ボーク","チョーク","ハーフ",
        "オールド","ゴールド","ショー","スクリュー","ニュース","ルビー","コピー","メロディー","サラリーマン","エース","レース","ゲーム","イメージ","ステージ","セール",
        "デート","スケート","トレード","パレード","アーケード","アイソトープ","ストローク","ドーム","チューブ","インフレーション","インスピレーション","イントネーション",
        "オートメーション","ローション","モーション","はいアー","ファイアー","カルチャー","アドベンチャー","マッサージ","メッセージ","アップル","パイナップル","スリッパ",
        "モットー","マリオネット","スタッフ","ドレス","バター","アピール","アプローチ","コーヒー","アシスタント","アトラクション","パイロット","スキップ","マジック",
        "オリンピック","ダイナミック","トラック","スナック","ラッキー","ニッケル","チェック","ロッカー","ラケット","チケット","スペース","ウェーブ","ブレーク",
        "ビスケット","カップル","トイレ","ローラー","リスト","オリエンタル","インスタント","ストロー","ウィスキー","パーティー","デコレーション","ナレーション",
        "テニスコート","スケジュール","ゴルフ","ダイビング","バス","パックツアー","スキー","ゴールデンウイーク","デパート","セーター","コーヒーメーカー","ティーカップセット",
        "テーブルクロス","アイロン","ワインクラス","オーストラリア","クリスマス","オーストリア","アクセサリー","ストレス","スポーツ","ジョギング","ダイエット","レントゲン",
        "コンピューター","コピーマシン","ノートパソコン","ファクシミリ","キャビネット","アルバイト","ビデオ","ステレオ","メニュー","ボールペン" };

    public List<string> WordCache;

    private void Awake()
    {
        for (int i = 0; i < list.Length; i++)
        {
            WordListEasy.Add(list[i]);
        }
    }
    public void AddSpawnedWord(string word) 
    {
        WordCache.Add(word); 
    }
    public void RemoveSpawnedWord(string word)
    {
        for (int i = 0; i < WordCache.Count; i++)
        {
            if (WordCache[i] == word)
            {
                WordCache.RemoveAt(i);
                Debug.Log("Removed word cache index: " + i + " with word: " + word);
                break; 
            }
        
        }
    }

}
